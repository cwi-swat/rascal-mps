<?xml version="1.0" encoding="UTF-8"?>
<root>
  <lexical>
    <name>RealLiteral</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Tags</name>
    <production>
      <name>default</name>
      <arg>
        <name>tags</name>
        <type>Tag</type>
        <card>*</card>
      </arg>
      <layout>
        <ref>
          <name>tags</name>
          <type>Tag</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>ModuleActuals</name>
    <production>
      <name>default</name>
      <arg>
        <name>types</name>
        <type>Type</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>types</name>
          <type>Type</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Renamings</name>
    <production>
      <name>default</name>
      <arg>
        <name>renamings</name>
        <type>Renaming</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>renaming</lit>
        <ref>
          <name>renamings</name>
          <type>Renaming</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>KeywordFormal</name>
    <production>
      <name>default</name>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>MidPathChars</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>OptionalExpression</name>
    <production>
      <name>noExpression</name>
      <layout />
    </production>
    <production>
      <name>expression</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Expression</name>
    <production>
      <name>it</name>
      <layout />
    </production>
    <production>
      <name>tuple</name>
      <arg>
        <name>elements</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>&lt;</lit>
        <ref>
          <name>elements</name>
          <type>Expression</type>
        </ref>
        <lit>&gt;</lit>
      </layout>
    </production>
    <production>
      <name>literal</name>
      <arg>
        <name>literal</name>
        <type>Literal</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>literal</name>
          <type>Literal</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>visit</name>
      <arg>
        <name>label</name>
        <type>Label</type>
        <card>1</card>
      </arg>
      <arg>
        <name>visit</name>
        <type>Visit</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>label</name>
          <type>Label</type>
        </ref>
        <ref>
          <name>visit</name>
          <type>Visit</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>closure</name>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>parameters</name>
        <type>Parameters</type>
        <card>1</card>
      </arg>
      <arg>
        <name>statements</name>
        <type>Statement</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <ref>
          <name>parameters</name>
          <type>Parameters</type>
        </ref>
        <lit>{</lit>
        <ref>
          <name>statements</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>reducer</name>
      <arg>
        <name>init</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>result</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>generators</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>init</name>
          <type>Expression</type>
        </ref>
        <lit>|</lit>
        <ref>
          <name>result</name>
          <type>Expression</type>
        </ref>
        <lit>|</lit>
        <ref>
          <name>generators</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>callOrTree</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>arguments</name>
        <type>Expression</type>
        <card>*</card>
      </arg>
      <arg>
        <name>keywordArguments</name>
        <type>defaultType</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>(</lit>
        <ref>
          <name>arguments</name>
          <type>Expression</type>
        </ref>
        <ref>
          <name>keywordArguments</name>
          <type>KeywordArguments</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>nonEmptyBlock</name>
      <arg>
        <name>statements</name>
        <type>Statement</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>{</lit>
        <ref>
          <name>statements</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>set</name>
      <arg>
        <name>elements0</name>
        <type>Expression</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>{</lit>
        <ref>
          <name>elements0</name>
          <type>Expression</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>reifiedType</name>
      <arg>
        <name>symbol</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>definitions</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>type</lit>
        <lit>(</lit>
        <ref>
          <name>symbol</name>
          <type>Expression</type>
        </ref>
        <lit>,</lit>
        <ref>
          <name>definitions</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>all</name>
      <arg>
        <name>generators</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>all</lit>
        <lit>(</lit>
        <ref>
          <name>generators</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>sliceStep</name>
      <arg>
        <name>optFirst</name>
        <type>OptionalExpression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>second</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>optLast</name>
        <type>OptionalExpression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>optFirst</name>
          <type>OptionalExpression</type>
        </ref>
        <lit>,</lit>
        <ref>
          <name>second</name>
          <type>Expression</type>
        </ref>
        <lit>..</lit>
        <ref>
          <name>optLast</name>
          <type>OptionalExpression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>is</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>is</lit>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>voidClosure</name>
      <arg>
        <name>parameters</name>
        <type>Parameters</type>
        <card>1</card>
      </arg>
      <arg>
        <name>statements0</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <ref>
          <name>parameters</name>
          <type>Parameters</type>
        </ref>
        <lit>{</lit>
        <ref>
          <name>statements0</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>slice</name>
      <arg>
        <name>optFirst</name>
        <type>OptionalExpression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>optLast</name>
        <type>OptionalExpression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>optFirst</name>
          <type>OptionalExpression</type>
        </ref>
        <lit>..</lit>
        <ref>
          <name>optLast</name>
          <type>OptionalExpression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>list</name>
      <arg>
        <name>elements0</name>
        <type>Expression</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>elements0</name>
          <type>Expression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>comprehension</name>
      <arg>
        <name>comprehension</name>
        <type>Comprehension</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>comprehension</name>
          <type>Comprehension</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>stepRange</name>
      <arg>
        <name>first</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>second</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>last</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>first</name>
          <type>Expression</type>
        </ref>
        <lit>,</lit>
        <ref>
          <name>second</name>
          <type>Expression</type>
        </ref>
        <lit>..</lit>
        <ref>
          <name>last</name>
          <type>Expression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>fieldProject</name>
      <arg>
        <name>fields</name>
        <type>Field</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>&lt;</lit>
        <ref>
          <name>fields</name>
          <type>Field</type>
        </ref>
        <lit>&gt;</lit>
      </layout>
    </production>
    <production>
      <name>fieldAccess</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>field</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>.</lit>
        <ref>
          <name>field</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>setAnnotation</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>value</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>[</lit>
        <lit>@</lit>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>value</name>
          <type>Expression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>getAnnotation</name>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>@</lit>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>has</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>has</lit>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>transitiveReflexiveClosure</name>
      <arg>
        <name>argument</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>argument</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>qualifiedName</name>
      <arg>
        <name>qualifiedName</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>qualifiedName</name>
          <type>QualifiedName</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>map</name>
      <arg>
        <name>mappings</name>
        <type>Mapping</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>mappings</name>
          <type>Mapping</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>transitiveClosure</name>
      <arg>
        <name>argument</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>argument</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>subscript</name>
      <arg>
        <name>subscripts</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>subscripts</name>
          <type>Expression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>any</name>
      <arg>
        <name>generators</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>any</lit>
        <lit>(</lit>
        <ref>
          <name>generators</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>bracket</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>fieldUpdate</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>key</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>replacement</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>[</lit>
        <ref>
          <name>key</name>
          <type>Name</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>replacement</name>
          <type>Expression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>reifyType</name>
      <layout>
        <lit>#</lit>
      </layout>
    </production>
    <production>
      <name>range</name>
      <arg>
        <name>first</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>last</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>first</name>
          <type>Expression</type>
        </ref>
        <lit>..</lit>
        <ref>
          <name>last</name>
          <type>Expression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Expression</name>
    <production>
      <name>asType</name>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>argument</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <lit>]</lit>
        <ref>
          <name>argument</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>negative</name>
      <arg>
        <name>argument</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>-</lit>
        <ref>
          <name>argument</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>negation</name>
      <arg>
        <name>argument</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>!</lit>
        <ref>
          <name>argument</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>splice</name>
      <arg>
        <name>argument</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>*</lit>
        <ref>
          <name>argument</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Expression</name>
    <production>
      <name>concrete</name>
      <arg>
        <name>concrete</name>
        <type>Concrete</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>concrete</name>
          <type>Concrete</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Class</name>
    <production>
      <name>simpleCharclass</name>
      <arg>
        <name>ranges</name>
        <type>Range</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>ranges</name>
          <type>Range</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>complement</name>
      <arg>
        <name>charClass</name>
        <type>Class</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>!</lit>
        <ref>
          <name>charClass</name>
          <type>Class</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Class</name>
    <production>
      <name>union</name>
      <arg>
        <name>lhs</name>
        <type>Class</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Class</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Class</type>
        </ref>
        <lit>||</lit>
        <ref>
          <name>rhs</name>
          <type>Class</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>bracket</name>
      <arg>
        <name>charClass</name>
        <type>Class</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>charClass</name>
          <type>Class</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Class</name>
  </nonterminal>
  <nonterminal>
    <name>PathPart</name>
    <production>
      <name>interpolated</name>
      <arg>
        <name>pre</name>
        <type>PrePathChars</type>
        <card>1</card>
      </arg>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>tail</name>
        <type>PathTail</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>pre</name>
          <type>PrePathChars</type>
        </ref>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <ref>
          <name>tail</name>
          <type>PathTail</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>nonInterpolated</name>
      <arg>
        <name>pathChars</name>
        <type>PathChars</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>pathChars</name>
          <type>PathChars</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Signature</name>
    <production>
      <name>withThrows</name>
      <arg>
        <name>modifiers</name>
        <type>FunctionModifiers</type>
        <card>1</card>
      </arg>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>parameters</name>
        <type>Parameters</type>
        <card>1</card>
      </arg>
      <arg>
        <name>exceptions</name>
        <type>Type</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>modifiers</name>
          <type>FunctionModifiers</type>
        </ref>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <ref>
          <name>parameters</name>
          <type>Parameters</type>
        </ref>
        <lit>throws</lit>
        <ref>
          <name>exceptions</name>
          <type>Type</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>noThrows</name>
      <arg>
        <name>modifiers</name>
        <type>FunctionModifiers</type>
        <card>1</card>
      </arg>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>parameters</name>
        <type>Parameters</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>modifiers</name>
          <type>FunctionModifiers</type>
        </ref>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <ref>
          <name>parameters</name>
          <type>Parameters</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>ShellCommand</name>
    <production>
      <name>unimport</name>
      <arg>
        <name>name</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>unimport</lit>
        <ref>
          <name>name</name>
          <type>QualifiedName</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>listDeclarations</name>
      <layout>
        <lit>declarations</lit>
      </layout>
    </production>
    <production>
      <name>help</name>
      <layout>
        <lit>help</lit>
      </layout>
    </production>
    <production>
      <name>undeclare</name>
      <arg>
        <name>name</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>undeclare</lit>
        <ref>
          <name>name</name>
          <type>QualifiedName</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>quit</name>
      <layout>
        <lit>quit</lit>
      </layout>
    </production>
    <production>
      <name>clear</name>
      <layout>
        <lit>clear</lit>
      </layout>
    </production>
    <production>
      <name>setOption</name>
      <arg>
        <name>name</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>set</lit>
        <ref>
          <name>name</name>
          <type>QualifiedName</type>
        </ref>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>listModules</name>
      <layout>
        <lit>modules</lit>
      </layout>
    </production>
    <production>
      <name>test</name>
      <layout>
        <lit>test</lit>
      </layout>
    </production>
    <production>
      <name>history</name>
      <layout>
        <lit>history</lit>
      </layout>
    </production>
    <production>
      <name>edit</name>
      <arg>
        <name>name</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>edit</lit>
        <ref>
          <name>name</name>
          <type>QualifiedName</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Catch</name>
    <production>
      <name>binding</name>
      <arg>
        <name>pattern</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <arg>
        <name>body</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>catch</lit>
        <ref>
          <name>pattern</name>
          <type>Pattern</type>
        </ref>
        <lit>:</lit>
        <ref>
          <name>body</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>default</name>
      <arg>
        <name>body</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>catch</lit>
        <lit>:</lit>
        <ref>
          <name>body</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>DataTarget</name>
    <production>
      <name>labeled</name>
      <arg>
        <name>label</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>label</name>
          <type>Name</type>
        </ref>
        <lit>:</lit>
      </layout>
    </production>
    <production>
      <name>empty</name>
      <layout />
    </production>
  </nonterminal>
  <nonterminal>
    <name>KeywordFormals</name>
    <production>
      <name>default</name>
      <arg>
        <name>optionalComma</name>
        <type>OptionalComma</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>optionalComma</name>
          <type>OptionalComma</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>none</name>
      <layout />
    </production>
  </nonterminal>
  <nonterminal>
    <name>Renaming</name>
    <production>
      <name>default</name>
      <arg>
        <name>from</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>to</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>from</name>
          <type>Name</type>
        </ref>
        <lit>=&gt;</lit>
        <ref>
          <name>to</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Tag</name>
    <production>
      <name>expression</name>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>@</lit>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>=</lit>
      </layout>
    </production>
    <production>
      <name>empty</name>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>@</lit>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>default</name>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>contents</name>
        <type>TagString</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>@</lit>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <ref>
          <name>contents</name>
          <type>TagString</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Type</name>
    <production>
      <name>structured</name>
      <arg>
        <name>structured</name>
        <type>StructuredType</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>structured</name>
          <type>StructuredType</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>user</name>
      <arg>
        <name>user</name>
        <type>UserType</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>user</name>
          <type>UserType</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>variable</name>
      <arg>
        <name>typeVar</name>
        <type>TypeVar</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>typeVar</name>
          <type>TypeVar</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>basic</name>
      <arg>
        <name>basic</name>
        <type>BasicType</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>basic</name>
          <type>BasicType</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>bracket</name>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>function</name>
      <arg>
        <name>function</name>
        <type>FunctionType</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>function</name>
          <type>FunctionType</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>symbol</name>
      <arg>
        <name>symbol</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>symbol</name>
          <type>Sym</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>selector</name>
      <arg>
        <name>selector</name>
        <type>DataTypeSelector</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>selector</name>
          <type>DataTypeSelector</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>LocationLiteral</name>
    <production>
      <name>default</name>
      <arg>
        <name>protocolPart</name>
        <type>ProtocolPart</type>
        <card>1</card>
      </arg>
      <arg>
        <name>pathPart</name>
        <type>PathPart</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>protocolPart</name>
          <type>ProtocolPart</type>
        </ref>
        <ref>
          <name>pathPart</name>
          <type>PathPart</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Declaration</name>
    <production>
      <name>data</name>
      <arg>
        <name>tags</name>
        <type>Tags</type>
        <card>1</card>
      </arg>
      <arg>
        <name>visibility</name>
        <type>Visibility</type>
        <card>1</card>
      </arg>
      <arg>
        <name>user</name>
        <type>UserType</type>
        <card>1</card>
      </arg>
      <arg>
        <name>commonKeywordParameters</name>
        <type>CommonKeywordParameters</type>
        <card>1</card>
      </arg>
      <arg>
        <name>variants</name>
        <type>Variant</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>tags</name>
          <type>Tags</type>
        </ref>
        <ref>
          <name>visibility</name>
          <type>Visibility</type>
        </ref>
        <lit>data</lit>
        <ref>
          <name>user</name>
          <type>UserType</type>
        </ref>
        <ref>
          <name>commonKeywordParameters</name>
          <type>CommonKeywordParameters</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>variants</name>
          <type>Variant</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>annotation</name>
      <arg>
        <name>tags</name>
        <type>Tags</type>
        <card>1</card>
      </arg>
      <arg>
        <name>visibility</name>
        <type>Visibility</type>
        <card>1</card>
      </arg>
      <arg>
        <name>annoType</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>onType</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>tags</name>
          <type>Tags</type>
        </ref>
        <ref>
          <name>visibility</name>
          <type>Visibility</type>
        </ref>
        <lit>anno</lit>
        <ref>
          <name>annoType</name>
          <type>Type</type>
        </ref>
        <ref>
          <name>onType</name>
          <type>Type</type>
        </ref>
        <lit>@</lit>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>alias</name>
      <arg>
        <name>tags</name>
        <type>Tags</type>
        <card>1</card>
      </arg>
      <arg>
        <name>visibility</name>
        <type>Visibility</type>
        <card>1</card>
      </arg>
      <arg>
        <name>user</name>
        <type>UserType</type>
        <card>1</card>
      </arg>
      <arg>
        <name>base</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>tags</name>
          <type>Tags</type>
        </ref>
        <ref>
          <name>visibility</name>
          <type>Visibility</type>
        </ref>
        <lit>alias</lit>
        <ref>
          <name>user</name>
          <type>UserType</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>base</name>
          <type>Type</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>dataAbstract</name>
      <arg>
        <name>tags</name>
        <type>Tags</type>
        <card>1</card>
      </arg>
      <arg>
        <name>visibility</name>
        <type>Visibility</type>
        <card>1</card>
      </arg>
      <arg>
        <name>user</name>
        <type>UserType</type>
        <card>1</card>
      </arg>
      <arg>
        <name>commonKeywordParameters</name>
        <type>CommonKeywordParameters</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>tags</name>
          <type>Tags</type>
        </ref>
        <ref>
          <name>visibility</name>
          <type>Visibility</type>
        </ref>
        <lit>data</lit>
        <ref>
          <name>user</name>
          <type>UserType</type>
        </ref>
        <ref>
          <name>commonKeywordParameters</name>
          <type>CommonKeywordParameters</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>tag</name>
      <arg>
        <name>tags</name>
        <type>Tags</type>
        <card>1</card>
      </arg>
      <arg>
        <name>visibility</name>
        <type>Visibility</type>
        <card>1</card>
      </arg>
      <arg>
        <name>kind</name>
        <type>Kind</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>types</name>
        <type>Type</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>tags</name>
          <type>Tags</type>
        </ref>
        <ref>
          <name>visibility</name>
          <type>Visibility</type>
        </ref>
        <lit>tag</lit>
        <ref>
          <name>kind</name>
          <type>Kind</type>
        </ref>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>on</lit>
        <ref>
          <name>types</name>
          <type>Type</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>function</name>
      <arg>
        <name>functionDeclaration</name>
        <type>FunctionDeclaration</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>functionDeclaration</name>
          <type>FunctionDeclaration</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>variable</name>
      <arg>
        <name>tags</name>
        <type>Tags</type>
        <card>1</card>
      </arg>
      <arg>
        <name>visibility</name>
        <type>Visibility</type>
        <card>1</card>
      </arg>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>variables</name>
        <type>Variable</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>tags</name>
          <type>Tags</type>
        </ref>
        <ref>
          <name>visibility</name>
          <type>Visibility</type>
        </ref>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <ref>
          <name>variables</name>
          <type>Variable</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>FunctionBody</name>
    <production>
      <name>default</name>
      <arg>
        <name>statements</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>{</lit>
        <ref>
          <name>statements</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Field</name>
    <production>
      <name>name</name>
      <arg>
        <name>fieldName</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>fieldName</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>index</name>
      <arg>
        <name>fieldIndex</name>
        <type>IntegerLiteral</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>fieldIndex</name>
          <type>IntegerLiteral</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Range</name>
    <production>
      <name>character</name>
      <arg>
        <name>character</name>
        <type>Char</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>character</name>
          <type>Char</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>fromTo</name>
      <arg>
        <name>start</name>
        <type>Char</type>
        <card>1</card>
      </arg>
      <arg>
        <name>end</name>
        <type>Char</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>start</name>
          <type>Char</type>
        </ref>
        <lit>-</lit>
        <ref>
          <name>end</name>
          <type>Char</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>OptionalComma</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>PrePathChars</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>StringConstant</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Variable</name>
    <production>
      <name>unInitialized</name>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>initialized</name>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>initial</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>initial</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>TypeArg</name>
    <production>
      <name>default</name>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>named</name>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>DateAndTime</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>StringLiteral</name>
    <production>
      <name>nonInterpolated</name>
      <arg>
        <name>constant</name>
        <type>StringConstant</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>constant</name>
          <type>StringConstant</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>interpolated</name>
      <arg>
        <name>pre</name>
        <type>PreStringChars</type>
        <card>1</card>
      </arg>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>tail</name>
        <type>StringTail</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>pre</name>
          <type>PreStringChars</type>
        </ref>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <ref>
          <name>tail</name>
          <type>StringTail</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>template</name>
      <arg>
        <name>pre</name>
        <type>PreStringChars</type>
        <card>1</card>
      </arg>
      <arg>
        <name>template</name>
        <type>StringTemplate</type>
        <card>1</card>
      </arg>
      <arg>
        <name>tail</name>
        <type>StringTail</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>pre</name>
          <type>PreStringChars</type>
        </ref>
        <ref>
          <name>template</name>
          <type>StringTemplate</type>
        </ref>
        <ref>
          <name>tail</name>
          <type>StringTail</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>Backslash</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Bound</name>
    <production>
      <name>default</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>;</lit>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>empty</name>
      <layout />
    </production>
  </nonterminal>
  <lexical>
    <name>Char</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>CaseInsensitiveStringConstant</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>JustTime</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Declarator</name>
    <production>
      <name>default</name>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>variables</name>
        <type>Variable</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <ref>
          <name>variables</name>
          <type>Variable</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Target</name>
    <production>
      <name>empty</name>
      <layout />
    </production>
    <production>
      <name>labeled</name>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>IntegerLiteral</name>
    <production>
      <name>octalIntegerLiteral</name>
      <arg>
        <name>octal</name>
        <type>OctalIntegerLiteral</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>octal</name>
          <type>OctalIntegerLiteral</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>decimalIntegerLiteral</name>
      <arg>
        <name>decimal</name>
        <type>DecimalIntegerLiteral</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>decimal</name>
          <type>DecimalIntegerLiteral</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>hexIntegerLiteral</name>
      <arg>
        <name>hex</name>
        <type>HexIntegerLiteral</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>hex</name>
          <type>HexIntegerLiteral</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Pattern</name>
    <production>
      <name>list</name>
      <arg>
        <name>elements0</name>
        <type>Pattern</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>elements0</name>
          <type>Pattern</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>callOrTree</name>
      <arg>
        <name>expression</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <arg>
        <name>arguments</name>
        <type>Pattern</type>
        <card>*</card>
      </arg>
      <arg>
        <name>keywordArguments</name>
        <type>defaultType</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>expression</name>
          <type>Pattern</type>
        </ref>
        <lit>(</lit>
        <ref>
          <name>arguments</name>
          <type>Pattern</type>
        </ref>
        <ref>
          <name>keywordArguments</name>
          <type>KeywordArguments</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>tuple</name>
      <arg>
        <name>elements</name>
        <type>Pattern</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>&lt;</lit>
        <ref>
          <name>elements</name>
          <type>Pattern</type>
        </ref>
        <lit>&gt;</lit>
      </layout>
    </production>
    <production>
      <name>literal</name>
      <arg>
        <name>literal</name>
        <type>Literal</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>literal</name>
          <type>Literal</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>set</name>
      <arg>
        <name>elements0</name>
        <type>Pattern</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>{</lit>
        <ref>
          <name>elements0</name>
          <type>Pattern</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>splice</name>
      <arg>
        <name>argument</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>*</lit>
        <ref>
          <name>argument</name>
          <type>Pattern</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>reifiedType</name>
      <arg>
        <name>symbol</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <arg>
        <name>definitions</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>type</lit>
        <lit>(</lit>
        <ref>
          <name>symbol</name>
          <type>Pattern</type>
        </ref>
        <lit>,</lit>
        <ref>
          <name>definitions</name>
          <type>Pattern</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>multiVariable</name>
      <arg>
        <name>qualifiedName</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>qualifiedName</name>
          <type>QualifiedName</type>
        </ref>
        <lit>*</lit>
      </layout>
    </production>
    <production>
      <name>negative</name>
      <arg>
        <name>argument</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>-</lit>
        <ref>
          <name>argument</name>
          <type>Pattern</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>map</name>
      <arg>
        <name>mappings</name>
        <type>Mapping</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>mappings</name>
          <type>Mapping</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>typedVariable</name>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>concrete</name>
      <arg>
        <name>concrete</name>
        <type>Concrete</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>concrete</name>
          <type>Concrete</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>qualifiedName</name>
      <arg>
        <name>qualifiedName</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>qualifiedName</name>
          <type>QualifiedName</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>splicePlus</name>
      <arg>
        <name>argument</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>+</lit>
        <ref>
          <name>argument</name>
          <type>Pattern</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Pattern</name>
    <production>
      <name>descendant</name>
      <arg>
        <name>pattern</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>/</lit>
        <ref>
          <name>pattern</name>
          <type>Pattern</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>asType</name>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>argument</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <lit>]</lit>
        <ref>
          <name>argument</name>
          <type>Pattern</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>variableBecomes</name>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>pattern</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>:</lit>
        <ref>
          <name>pattern</name>
          <type>Pattern</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>typedVariableBecomes</name>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>pattern</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>:</lit>
        <ref>
          <name>pattern</name>
          <type>Pattern</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>anti</name>
      <arg>
        <name>pattern</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>!</lit>
        <ref>
          <name>pattern</name>
          <type>Pattern</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Pattern</name>
  </nonterminal>
  <nonterminal>
    <name>Case</name>
    <production>
      <name>patternWithAction</name>
      <arg>
        <name>patternWithAction</name>
        <type>PatternWithAction</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>case</lit>
        <ref>
          <name>patternWithAction</name>
          <type>PatternWithAction</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>default</name>
      <arg>
        <name>statement</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>default</lit>
        <lit>:</lit>
        <ref>
          <name>statement</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>PostPathChars</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>StringCharacter</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>ConcretePart</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>ImportedModule</name>
    <production>
      <name>actuals</name>
      <arg>
        <name>name</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <arg>
        <name>actuals</name>
        <type>ModuleActuals</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>name</name>
          <type>QualifiedName</type>
        </ref>
        <ref>
          <name>actuals</name>
          <type>ModuleActuals</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>default</name>
      <arg>
        <name>name</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>name</name>
          <type>QualifiedName</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>renamings</name>
      <arg>
        <name>name</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <arg>
        <name>renamings</name>
        <type>Renamings</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>name</name>
          <type>QualifiedName</type>
        </ref>
        <ref>
          <name>renamings</name>
          <type>Renamings</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>actualsRenaming</name>
      <arg>
        <name>name</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <arg>
        <name>actuals</name>
        <type>ModuleActuals</type>
        <card>1</card>
      </arg>
      <arg>
        <name>renamings</name>
        <type>Renamings</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>name</name>
          <type>QualifiedName</type>
        </ref>
        <ref>
          <name>actuals</name>
          <type>ModuleActuals</type>
        </ref>
        <ref>
          <name>renamings</name>
          <type>Renamings</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>PathChars</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Strategy</name>
    <production>
      <name>innermost</name>
      <layout>
        <lit>innermost</lit>
      </layout>
    </production>
    <production>
      <name>topDown</name>
      <layout>
        <lit>top-down</lit>
      </layout>
    </production>
    <production>
      <name>bottomUpBreak</name>
      <layout>
        <lit>bottom-up-break</lit>
      </layout>
    </production>
    <production>
      <name>topDownBreak</name>
      <layout>
        <lit>top-down-break</lit>
      </layout>
    </production>
    <production>
      <name>outermost</name>
      <layout>
        <lit>outermost</lit>
      </layout>
    </production>
    <production>
      <name>bottomUp</name>
      <layout>
        <lit>bottom-up</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>LocalVariableDeclaration</name>
    <production>
      <name>default</name>
      <arg>
        <name>declarator</name>
        <type>Declarator</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>declarator</name>
          <type>Declarator</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>dynamic</name>
      <arg>
        <name>declarator</name>
        <type>Declarator</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>dynamic</lit>
        <ref>
          <name>declarator</name>
          <type>Declarator</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>FunctionType</name>
    <production>
      <name>typeArguments</name>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>arguments</name>
        <type>TypeArg</type>
        <card>*</card>
      </arg>
      <layout>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <lit>(</lit>
        <ref>
          <name>arguments</name>
          <type>TypeArg</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Visibility</name>
    <production>
      <name>private</name>
      <layout>
        <lit>private</lit>
      </layout>
    </production>
    <production>
      <name>public</name>
      <layout>
        <lit>public</lit>
      </layout>
    </production>
    <production>
      <name>default</name>
      <layout />
    </production>
  </nonterminal>
  <nonterminal>
    <name>Replacement</name>
    <production>
      <name>conditional</name>
      <arg>
        <name>replacementExpression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>conditions</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>replacementExpression</name>
          <type>Expression</type>
        </ref>
        <lit>when</lit>
        <ref>
          <name>conditions</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>unconditional</name>
      <arg>
        <name>replacementExpression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>replacementExpression</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>JustDate</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>NamedBackslash</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Assoc</name>
    <production>
      <name>left</name>
      <layout>
        <lit>left</lit>
      </layout>
    </production>
    <production>
      <name>associative</name>
      <layout>
        <lit>assoc</lit>
      </layout>
    </production>
    <production>
      <name>right</name>
      <layout>
        <lit>right</lit>
      </layout>
    </production>
    <production>
      <name>nonAssociative</name>
      <layout>
        <lit>non-assoc</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>PathTail</name>
    <production>
      <name>mid</name>
      <arg>
        <name>mid</name>
        <type>MidPathChars</type>
        <card>1</card>
      </arg>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>tail</name>
        <type>PathTail</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>mid</name>
          <type>MidPathChars</type>
        </ref>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <ref>
          <name>tail</name>
          <type>PathTail</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>post</name>
      <arg>
        <name>post</name>
        <type>PostPathChars</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>post</name>
          <type>PostPathChars</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>MidProtocolChars</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Kind</name>
    <production>
      <name>all</name>
      <layout>
        <lit>all</lit>
      </layout>
    </production>
    <production>
      <name>variable</name>
      <layout>
        <lit>variable</lit>
      </layout>
    </production>
    <production>
      <name>alias</name>
      <layout>
        <lit>alias</lit>
      </layout>
    </production>
    <production>
      <name>module</name>
      <layout>
        <lit>module</lit>
      </layout>
    </production>
    <production>
      <name>anno</name>
      <layout>
        <lit>anno</lit>
      </layout>
    </production>
    <production>
      <name>data</name>
      <layout>
        <lit>data</lit>
      </layout>
    </production>
    <production>
      <name>view</name>
      <layout>
        <lit>view</lit>
      </layout>
    </production>
    <production>
      <name>tag</name>
      <layout>
        <lit>tag</lit>
      </layout>
    </production>
    <production>
      <name>function</name>
      <layout>
        <lit>function</lit>
      </layout>
    </production>
  </nonterminal>
  <keywords>
    <keyword>break</keyword>
    <keyword>for</keyword>
    <keyword>str</keyword>
    <keyword>node</keyword>
    <keyword>tuple</keyword>
    <keyword>solve</keyword>
    <keyword>rat</keyword>
    <keyword>dynamic</keyword>
    <keyword>assoc</keyword>
    <keyword>bag</keyword>
    <keyword>set</keyword>
    <keyword>o</keyword>
    <keyword>start</keyword>
    <keyword>BasicType</keyword>
    <keyword>lrel</keyword>
    <keyword>continue</keyword>
    <keyword>bracket</keyword>
    <keyword>rel</keyword>
    <keyword>list</keyword>
    <keyword>test</keyword>
    <keyword>return</keyword>
    <keyword>false</keyword>
    <keyword>join</keyword>
    <keyword>else</keyword>
    <keyword>it</keyword>
    <keyword>in</keyword>
    <keyword>if</keyword>
    <keyword>non-assoc</keyword>
    <keyword>lexical</keyword>
    <keyword>value</keyword>
    <keyword>map</keyword>
    <keyword>visit</keyword>
    <keyword>all</keyword>
    <keyword>try</keyword>
    <keyword>private</keyword>
    <keyword>true</keyword>
    <keyword>finally</keyword>
    <keyword>real</keyword>
    <keyword>void</keyword>
    <keyword>keyword</keyword>
    <keyword>any</keyword>
    <keyword>one</keyword>
    <keyword>module</keyword>
    <keyword>public</keyword>
    <keyword>throws</keyword>
    <keyword>alias</keyword>
    <keyword>default</keyword>
    <keyword>catch</keyword>
    <keyword>insert</keyword>
    <keyword>anno</keyword>
    <keyword>throw</keyword>
    <keyword>bool</keyword>
    <keyword>switch</keyword>
    <keyword>type</keyword>
    <keyword>while</keyword>
    <keyword>notin</keyword>
    <keyword>case</keyword>
    <keyword>layout</keyword>
    <keyword>mod</keyword>
    <keyword>extend</keyword>
    <keyword>append</keyword>
    <keyword>fail</keyword>
    <keyword>datetime</keyword>
    <keyword>filter</keyword>
    <keyword>loc</keyword>
    <keyword>assert</keyword>
    <keyword>data</keyword>
    <keyword>import</keyword>
    <keyword>num</keyword>
    <keyword>tag</keyword>
    <keyword>syntax</keyword>
    <keyword>int</keyword>
  </keywords>
  <nonterminal>
    <name>Label</name>
    <production>
      <name>default</name>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>:</lit>
      </layout>
    </production>
    <production>
      <name>empty</name>
      <layout />
    </production>
  </nonterminal>
  <lexical>
    <name>OctalIntegerLiteral</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>DateTimeLiteral</name>
    <production>
      <name>dateLiteral</name>
      <arg>
        <name>date</name>
        <type>JustDate</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>date</name>
          <type>JustDate</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>timeLiteral</name>
      <arg>
        <name>time</name>
        <type>JustTime</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>time</name>
          <type>JustTime</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>dateAndTimeLiteral</name>
      <arg>
        <name>dateAndTime</name>
        <type>DateAndTime</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>dateAndTime</name>
          <type>DateAndTime</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Prod</name>
    <production>
      <name>associativityGroup</name>
      <arg>
        <name>associativity</name>
        <type>Assoc</type>
        <card>1</card>
      </arg>
      <arg>
        <name>group</name>
        <type>Prod</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>associativity</name>
          <type>Assoc</type>
        </ref>
        <lit>(</lit>
        <ref>
          <name>group</name>
          <type>Prod</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>reference</name>
      <arg>
        <name>referenced</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>:</lit>
        <ref>
          <name>referenced</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>unlabeled</name>
      <arg>
        <name>modifiers</name>
        <type>ProdModifier</type>
        <card>*</card>
      </arg>
      <arg>
        <name>syms</name>
        <type>Sym</type>
        <card>*</card>
      </arg>
      <layout>
        <ref>
          <name>modifiers</name>
          <type>ProdModifier</type>
        </ref>
        <ref>
          <name>syms</name>
          <type>Sym</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>labeled</name>
      <arg>
        <name>modifiers</name>
        <type>ProdModifier</type>
        <card>*</card>
      </arg>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>syms</name>
        <type>Sym</type>
        <card>*</card>
      </arg>
      <layout>
        <ref>
          <name>modifiers</name>
          <type>ProdModifier</type>
        </ref>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>:</lit>
        <ref>
          <name>syms</name>
          <type>Sym</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Prod</name>
  </nonterminal>
  <lexical>
    <name>Comment</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>UnicodeEscape</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>SyntaxDefinition</name>
    <production>
      <name>keyword</name>
      <arg>
        <name>defined</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <arg>
        <name>production</name>
        <type>Prod</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>keyword</lit>
        <ref>
          <name>defined</name>
          <type>Sym</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>production</name>
          <type>Prod</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>language</name>
      <arg>
        <name>start</name>
        <type>Start</type>
        <card>1</card>
      </arg>
      <arg>
        <name>defined</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <arg>
        <name>production</name>
        <type>Prod</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>start</name>
          <type>Start</type>
        </ref>
        <lit>syntax</lit>
        <ref>
          <name>defined</name>
          <type>Sym</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>production</name>
          <type>Prod</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>lexical</name>
      <arg>
        <name>defined</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <arg>
        <name>production</name>
        <type>Prod</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>lexical</lit>
        <ref>
          <name>defined</name>
          <type>Sym</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>production</name>
          <type>Prod</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>layout</name>
      <arg>
        <name>vis</name>
        <type>Visibility</type>
        <card>1</card>
      </arg>
      <arg>
        <name>defined</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <arg>
        <name>production</name>
        <type>Prod</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>vis</name>
          <type>Visibility</type>
        </ref>
        <lit>layout</lit>
        <ref>
          <name>defined</name>
          <type>Sym</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>production</name>
          <type>Prod</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>ModuleParameters</name>
    <production>
      <name>default</name>
      <arg>
        <name>parameters</name>
        <type>TypeVar</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>parameters</name>
          <type>TypeVar</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>Output</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>DatePart</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Assignable</name>
    <production>
      <name>constructor</name>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>arguments</name>
        <type>Assignable</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>(</lit>
        <ref>
          <name>arguments</name>
          <type>Assignable</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>subscript</name>
      <arg>
        <name>receiver</name>
        <type>Assignable</type>
        <card>1</card>
      </arg>
      <arg>
        <name>subscript</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>receiver</name>
          <type>Assignable</type>
        </ref>
        <lit>[</lit>
        <ref>
          <name>subscript</name>
          <type>Expression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>tuple</name>
      <arg>
        <name>elements</name>
        <type>Assignable</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>&lt;</lit>
        <ref>
          <name>elements</name>
          <type>Assignable</type>
        </ref>
        <lit>&gt;</lit>
      </layout>
    </production>
    <production>
      <name>variable</name>
      <arg>
        <name>qualifiedName</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>qualifiedName</name>
          <type>QualifiedName</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>bracket</name>
      <arg>
        <name>arg</name>
        <type>Assignable</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>arg</name>
          <type>Assignable</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>sliceStep</name>
      <arg>
        <name>receiver</name>
        <type>Assignable</type>
        <card>1</card>
      </arg>
      <arg>
        <name>optFirst</name>
        <type>OptionalExpression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>second</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>optLast</name>
        <type>OptionalExpression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>receiver</name>
          <type>Assignable</type>
        </ref>
        <lit>[</lit>
        <ref>
          <name>optFirst</name>
          <type>OptionalExpression</type>
        </ref>
        <lit>,</lit>
        <ref>
          <name>second</name>
          <type>Expression</type>
        </ref>
        <lit>..</lit>
        <ref>
          <name>optLast</name>
          <type>OptionalExpression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>fieldAccess</name>
      <arg>
        <name>receiver</name>
        <type>Assignable</type>
        <card>1</card>
      </arg>
      <arg>
        <name>field</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>receiver</name>
          <type>Assignable</type>
        </ref>
        <lit>.</lit>
        <ref>
          <name>field</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>slice</name>
      <arg>
        <name>receiver</name>
        <type>Assignable</type>
        <card>1</card>
      </arg>
      <arg>
        <name>optFirst</name>
        <type>OptionalExpression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>optLast</name>
        <type>OptionalExpression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>receiver</name>
          <type>Assignable</type>
        </ref>
        <lit>[</lit>
        <ref>
          <name>optFirst</name>
          <type>OptionalExpression</type>
        </ref>
        <lit>..</lit>
        <ref>
          <name>optLast</name>
          <type>OptionalExpression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>annotation</name>
      <arg>
        <name>receiver</name>
        <type>Assignable</type>
        <card>1</card>
      </arg>
      <arg>
        <name>annotation</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>receiver</name>
          <type>Assignable</type>
        </ref>
        <lit>@</lit>
        <ref>
          <name>annotation</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>ifDefinedOrDefault</name>
      <arg>
        <name>receiver</name>
        <type>Assignable</type>
        <card>1</card>
      </arg>
      <arg>
        <name>defaultExpression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>receiver</name>
          <type>Assignable</type>
        </ref>
        <lit>?</lit>
        <ref>
          <name>defaultExpression</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>RationalLiteral</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>ProtocolTail</name>
    <production>
      <name>mid</name>
      <arg>
        <name>mid</name>
        <type>MidProtocolChars</type>
        <card>1</card>
      </arg>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>tail</name>
        <type>ProtocolTail</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>mid</name>
          <type>MidProtocolChars</type>
        </ref>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <ref>
          <name>tail</name>
          <type>ProtocolTail</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>post</name>
      <arg>
        <name>post</name>
        <type>PostProtocolChars</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>post</name>
          <type>PostProtocolChars</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Commands</name>
    <production>
      <name>commandlist</name>
      <arg>
        <name>commands</name>
        <type>EvalCommand</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>commands</name>
          <type>EvalCommand</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>BasicType</name>
    <production>
      <name>int</name>
      <layout>
        <lit>int</lit>
      </layout>
    </production>
    <production>
      <name>listRelation</name>
      <layout>
        <lit>lrel</lit>
      </layout>
    </production>
    <production>
      <name>bool</name>
      <layout>
        <lit>bool</lit>
      </layout>
    </production>
    <production>
      <name>type</name>
      <layout>
        <lit>type</lit>
      </layout>
    </production>
    <production>
      <name>set</name>
      <layout>
        <lit>set</lit>
      </layout>
    </production>
    <production>
      <name>bag</name>
      <layout>
        <lit>bag</lit>
      </layout>
    </production>
    <production>
      <name>rational</name>
      <layout>
        <lit>rat</lit>
      </layout>
    </production>
    <production>
      <name>real</name>
      <layout>
        <lit>real</lit>
      </layout>
    </production>
    <production>
      <name>node</name>
      <layout>
        <lit>node</lit>
      </layout>
    </production>
    <production>
      <name>tuple</name>
      <layout>
        <lit>tuple</lit>
      </layout>
    </production>
    <production>
      <name>map</name>
      <layout>
        <lit>map</lit>
      </layout>
    </production>
    <production>
      <name>loc</name>
      <layout>
        <lit>loc</lit>
      </layout>
    </production>
    <production>
      <name>num</name>
      <layout>
        <lit>num</lit>
      </layout>
    </production>
    <production>
      <name>list</name>
      <layout>
        <lit>list</lit>
      </layout>
    </production>
    <production>
      <name>value</name>
      <layout>
        <lit>value</lit>
      </layout>
    </production>
    <production>
      <name>void</name>
      <layout>
        <lit>void</lit>
      </layout>
    </production>
    <production>
      <name>relation</name>
      <layout>
        <lit>rel</lit>
      </layout>
    </production>
    <production>
      <name>dateTime</name>
      <layout>
        <lit>datetime</lit>
      </layout>
    </production>
    <production>
      <name>string</name>
      <layout>
        <lit>str</lit>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>RegExpModifier</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>CommonKeywordParameters</name>
    <production>
      <name>present</name>
      <arg>
        <name>keywordFormalList</name>
        <type>KeywordFormal</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>keywordFormalList</name>
          <type>KeywordFormal</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>absent</name>
      <layout />
    </production>
  </nonterminal>
  <nonterminal>
    <name>Command</name>
    <production>
      <name>import</name>
      <arg>
        <name>imported</name>
        <type>Import</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>imported</name>
          <type>Import</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>expression</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>statement</name>
      <arg>
        <name>statement</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>statement</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>shell</name>
      <arg>
        <name>command</name>
        <type>ShellCommand</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>:</lit>
        <ref>
          <name>command</name>
          <type>ShellCommand</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>declaration</name>
      <arg>
        <name>declaration</name>
        <type>Declaration</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>declaration</name>
          <type>Declaration</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>StringTemplate</name>
    <production>
      <name>ifThen</name>
      <arg>
        <name>conditions</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <arg>
        <name>preStats</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <arg>
        <name>body</name>
        <type>StringMiddle</type>
        <card>1</card>
      </arg>
      <arg>
        <name>postStats</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>if</lit>
        <lit>(</lit>
        <ref>
          <name>conditions</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <lit>{</lit>
        <ref>
          <name>preStats</name>
          <type>Statement</type>
        </ref>
        <ref>
          <name>body</name>
          <type>StringMiddle</type>
        </ref>
        <ref>
          <name>postStats</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>while</name>
      <arg>
        <name>condition</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>preStats</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <arg>
        <name>body</name>
        <type>StringMiddle</type>
        <card>1</card>
      </arg>
      <arg>
        <name>postStats</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>while</lit>
        <lit>(</lit>
        <ref>
          <name>condition</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <lit>{</lit>
        <ref>
          <name>preStats</name>
          <type>Statement</type>
        </ref>
        <ref>
          <name>body</name>
          <type>StringMiddle</type>
        </ref>
        <ref>
          <name>postStats</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>ifThenElse</name>
      <arg>
        <name>conditions</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <arg>
        <name>preStatsThen</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <arg>
        <name>thenString</name>
        <type>StringMiddle</type>
        <card>1</card>
      </arg>
      <arg>
        <name>postStatsThen</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <arg>
        <name>preStatsElse</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <arg>
        <name>elseString</name>
        <type>StringMiddle</type>
        <card>1</card>
      </arg>
      <arg>
        <name>postStatsElse</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>if</lit>
        <lit>(</lit>
        <ref>
          <name>conditions</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <lit>{</lit>
        <ref>
          <name>preStatsThen</name>
          <type>Statement</type>
        </ref>
        <ref>
          <name>thenString</name>
          <type>StringMiddle</type>
        </ref>
        <ref>
          <name>postStatsThen</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
        <lit>else</lit>
        <lit>{</lit>
        <ref>
          <name>preStatsElse</name>
          <type>Statement</type>
        </ref>
        <ref>
          <name>elseString</name>
          <type>StringMiddle</type>
        </ref>
        <ref>
          <name>postStatsElse</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>doWhile</name>
      <arg>
        <name>preStats</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <arg>
        <name>body</name>
        <type>StringMiddle</type>
        <card>1</card>
      </arg>
      <arg>
        <name>postStats</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <arg>
        <name>condition</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>do</lit>
        <lit>{</lit>
        <ref>
          <name>preStats</name>
          <type>Statement</type>
        </ref>
        <ref>
          <name>body</name>
          <type>StringMiddle</type>
        </ref>
        <ref>
          <name>postStats</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
        <lit>while</lit>
        <lit>(</lit>
        <ref>
          <name>condition</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>for</name>
      <arg>
        <name>generators</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <arg>
        <name>preStats</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <arg>
        <name>body</name>
        <type>StringMiddle</type>
        <card>1</card>
      </arg>
      <arg>
        <name>postStats</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>for</lit>
        <lit>(</lit>
        <ref>
          <name>generators</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <lit>{</lit>
        <ref>
          <name>preStats</name>
          <type>Statement</type>
        </ref>
        <ref>
          <name>body</name>
          <type>StringMiddle</type>
        </ref>
        <ref>
          <name>postStats</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>ProtocolPart</name>
    <production>
      <name>interpolated</name>
      <arg>
        <name>pre</name>
        <type>PreProtocolChars</type>
        <card>1</card>
      </arg>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>tail</name>
        <type>ProtocolTail</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>pre</name>
          <type>PreProtocolChars</type>
        </ref>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <ref>
          <name>tail</name>
          <type>ProtocolTail</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>nonInterpolated</name>
      <arg>
        <name>protocolChars</name>
        <type>ProtocolChars</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>protocolChars</name>
          <type>ProtocolChars</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Visit</name>
    <production>
      <name>defaultStrategy</name>
      <arg>
        <name>subject</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>cases</name>
        <type>Case</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>visit</lit>
        <lit>(</lit>
        <ref>
          <name>subject</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <lit>{</lit>
        <ref>
          <name>cases</name>
          <type>Case</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>givenStrategy</name>
      <arg>
        <name>strategy</name>
        <type>Strategy</type>
        <card>1</card>
      </arg>
      <arg>
        <name>subject</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>cases</name>
        <type>Case</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>strategy</name>
          <type>Strategy</type>
        </ref>
        <lit>visit</lit>
        <lit>(</lit>
        <ref>
          <name>subject</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <lit>{</lit>
        <ref>
          <name>cases</name>
          <type>Case</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>StructuredType</name>
    <production>
      <name>default</name>
      <arg>
        <name>basicType</name>
        <type>BasicType</type>
        <card>1</card>
      </arg>
      <arg>
        <name>arguments</name>
        <type>TypeArg</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>basicType</name>
          <type>BasicType</type>
        </ref>
        <lit>[</lit>
        <ref>
          <name>arguments</name>
          <type>TypeArg</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>NamedRegExp</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Parameters</name>
    <production>
      <name>default</name>
      <arg>
        <name>formals</name>
        <type>Formals</type>
        <card>1</card>
      </arg>
      <arg>
        <name>keywordFormals</name>
        <type>KeywordFormals</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>formals</name>
          <type>Formals</type>
        </ref>
        <ref>
          <name>keywordFormals</name>
          <type>KeywordFormals</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>varArgs</name>
      <arg>
        <name>formals</name>
        <type>Formals</type>
        <card>1</card>
      </arg>
      <arg>
        <name>keywordFormals</name>
        <type>KeywordFormals</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>formals</name>
          <type>Formals</type>
        </ref>
        <lit>...</lit>
        <ref>
          <name>keywordFormals</name>
          <type>KeywordFormals</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>DecimalIntegerLiteral</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>PreProtocolChars</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Header</name>
    <production>
      <name>parameters</name>
      <arg>
        <name>tags</name>
        <type>Tags</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <arg>
        <name>params</name>
        <type>ModuleParameters</type>
        <card>1</card>
      </arg>
      <arg>
        <name>imports</name>
        <type>Import</type>
        <card>*</card>
      </arg>
      <layout>
        <ref>
          <name>tags</name>
          <type>Tags</type>
        </ref>
        <lit>module</lit>
        <ref>
          <name>name</name>
          <type>QualifiedName</type>
        </ref>
        <ref>
          <name>params</name>
          <type>ModuleParameters</type>
        </ref>
        <ref>
          <name>imports</name>
          <type>Import</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>default</name>
      <arg>
        <name>tags</name>
        <type>Tags</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <arg>
        <name>imports</name>
        <type>Import</type>
        <card>*</card>
      </arg>
      <layout>
        <ref>
          <name>tags</name>
          <type>Tags</type>
        </ref>
        <lit>module</lit>
        <ref>
          <name>name</name>
          <type>QualifiedName</type>
        </ref>
        <ref>
          <name>imports</name>
          <type>Import</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>TypeVar</name>
    <production>
      <name>bounded</name>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>bound</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>&amp;</lit>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>&lt;:</lit>
        <ref>
          <name>bound</name>
          <type>Type</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>free</name>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>&amp;</lit>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>PostProtocolChars</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>Concrete</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>ProtocolChars</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Assignment</name>
    <production>
      <name>product</name>
      <layout>
        <lit>*=</lit>
      </layout>
    </production>
    <production>
      <name>division</name>
      <layout>
        <lit>/=</lit>
      </layout>
    </production>
    <production>
      <name>default</name>
      <layout>
        <lit>=</lit>
      </layout>
    </production>
    <production>
      <name>intersection</name>
      <layout>
        <lit>&amp;=</lit>
      </layout>
    </production>
    <production>
      <name>addition</name>
      <layout>
        <lit>+=</lit>
      </layout>
    </production>
    <production>
      <name>ifDefined</name>
      <layout>
        <lit>?=</lit>
      </layout>
    </production>
    <production>
      <name>append</name>
      <layout>
        <lit>&lt;&lt;=</lit>
      </layout>
    </production>
    <production>
      <name>subtraction</name>
      <layout>
        <lit>-=</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>PatternWithAction</name>
    <production>
      <name>arbitrary</name>
      <arg>
        <name>pattern</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <arg>
        <name>statement</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>pattern</name>
          <type>Pattern</type>
        </ref>
        <lit>:</lit>
        <ref>
          <name>statement</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>replacing</name>
      <arg>
        <name>pattern</name>
        <type>Pattern</type>
        <card>1</card>
      </arg>
      <arg>
        <name>replacement</name>
        <type>Replacement</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>pattern</name>
          <type>Pattern</type>
        </ref>
        <lit>=&gt;</lit>
        <ref>
          <name>replacement</name>
          <type>Replacement</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Module</name>
    <production>
      <name>default</name>
      <arg>
        <name>header</name>
        <type>Header</type>
        <card>1</card>
      </arg>
      <arg>
        <name>body</name>
        <type>Body</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>header</name>
          <type>Header</type>
        </ref>
        <ref>
          <name>body</name>
          <type>Body</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>MidStringChars</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Toplevel</name>
    <production>
      <name>givenVisibility</name>
      <arg>
        <name>declaration</name>
        <type>Declaration</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>declaration</name>
          <type>Declaration</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>TimePartNoTZ</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Statement</name>
    <production>
      <name>expression</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>continue</name>
      <arg>
        <name>target</name>
        <type>Target</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>continue</lit>
        <ref>
          <name>target</name>
          <type>Target</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>functionDeclaration</name>
      <arg>
        <name>functionDeclaration</name>
        <type>FunctionDeclaration</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>functionDeclaration</name>
          <type>FunctionDeclaration</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assignment</name>
      <arg>
        <name>assignable</name>
        <type>Assignable</type>
        <card>1</card>
      </arg>
      <arg>
        <name>operator</name>
        <type>Assignment</type>
        <card>1</card>
      </arg>
      <arg>
        <name>statement</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>assignable</name>
          <type>Assignable</type>
        </ref>
        <ref>
          <name>operator</name>
          <type>Assignment</type>
        </ref>
        <ref>
          <name>statement</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>variableDeclaration</name>
      <arg>
        <name>declaration</name>
        <type>LocalVariableDeclaration</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>declaration</name>
          <type>LocalVariableDeclaration</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>ifThen</name>
      <arg>
        <name>label</name>
        <type>Label</type>
        <card>1</card>
      </arg>
      <arg>
        <name>conditions</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <arg>
        <name>thenStatement</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>label</name>
          <type>Label</type>
        </ref>
        <lit>if</lit>
        <lit>(</lit>
        <ref>
          <name>conditions</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>thenStatement</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>solve</name>
      <arg>
        <name>variables</name>
        <type>QualifiedName</type>
        <card>+</card>
      </arg>
      <arg>
        <name>bound</name>
        <type>Bound</type>
        <card>1</card>
      </arg>
      <arg>
        <name>body</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>solve</lit>
        <lit>(</lit>
        <ref>
          <name>variables</name>
          <type>QualifiedName</type>
        </ref>
        <ref>
          <name>bound</name>
          <type>Bound</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>body</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>filter</name>
      <layout>
        <lit>filter</lit>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>switch</name>
      <arg>
        <name>label</name>
        <type>Label</type>
        <card>1</card>
      </arg>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>cases</name>
        <type>Case</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>label</name>
          <type>Label</type>
        </ref>
        <lit>switch</lit>
        <lit>(</lit>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <lit>{</lit>
        <ref>
          <name>cases</name>
          <type>Case</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>fail</name>
      <arg>
        <name>target</name>
        <type>Target</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>fail</lit>
        <ref>
          <name>target</name>
          <type>Target</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>tryFinally</name>
      <arg>
        <name>body</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <arg>
        <name>handlers</name>
        <type>Catch</type>
        <card>+</card>
      </arg>
      <arg>
        <name>finallyBody</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>try</lit>
        <ref>
          <name>body</name>
          <type>Statement</type>
        </ref>
        <ref>
          <name>handlers</name>
          <type>Catch</type>
        </ref>
        <lit>finally</lit>
        <ref>
          <name>finallyBody</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>try</name>
      <arg>
        <name>body</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <arg>
        <name>handlers</name>
        <type>Catch</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>try</lit>
        <ref>
          <name>body</name>
          <type>Statement</type>
        </ref>
        <ref>
          <name>handlers</name>
          <type>Catch</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assert</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>assert</lit>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>nonEmptyBlock</name>
      <arg>
        <name>label</name>
        <type>Label</type>
        <card>1</card>
      </arg>
      <arg>
        <name>statements</name>
        <type>Statement</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>label</name>
          <type>Label</type>
        </ref>
        <lit>{</lit>
        <ref>
          <name>statements</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>while</name>
      <arg>
        <name>label</name>
        <type>Label</type>
        <card>1</card>
      </arg>
      <arg>
        <name>conditions</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <arg>
        <name>body</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>label</name>
          <type>Label</type>
        </ref>
        <lit>while</lit>
        <lit>(</lit>
        <ref>
          <name>conditions</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>body</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>doWhile</name>
      <arg>
        <name>label</name>
        <type>Label</type>
        <card>1</card>
      </arg>
      <arg>
        <name>body</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <arg>
        <name>condition</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>label</name>
          <type>Label</type>
        </ref>
        <lit>do</lit>
        <ref>
          <name>body</name>
          <type>Statement</type>
        </ref>
        <lit>while</lit>
        <lit>(</lit>
        <ref>
          <name>condition</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>throw</name>
      <arg>
        <name>statement</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>throw</lit>
        <ref>
          <name>statement</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>append</name>
      <arg>
        <name>dataTarget</name>
        <type>DataTarget</type>
        <card>1</card>
      </arg>
      <arg>
        <name>statement</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>append</lit>
        <ref>
          <name>dataTarget</name>
          <type>DataTarget</type>
        </ref>
        <ref>
          <name>statement</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>return</name>
      <arg>
        <name>statement</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>return</lit>
        <ref>
          <name>statement</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>insert</name>
      <arg>
        <name>dataTarget</name>
        <type>DataTarget</type>
        <card>1</card>
      </arg>
      <arg>
        <name>statement</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>insert</lit>
        <ref>
          <name>dataTarget</name>
          <type>DataTarget</type>
        </ref>
        <ref>
          <name>statement</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>visit</name>
      <arg>
        <name>label</name>
        <type>Label</type>
        <card>1</card>
      </arg>
      <arg>
        <name>visit</name>
        <type>Visit</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>label</name>
          <type>Label</type>
        </ref>
        <ref>
          <name>visit</name>
          <type>Visit</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>break</name>
      <arg>
        <name>target</name>
        <type>Target</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>break</lit>
        <ref>
          <name>target</name>
          <type>Target</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>for</name>
      <arg>
        <name>label</name>
        <type>Label</type>
        <card>1</card>
      </arg>
      <arg>
        <name>generators</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <arg>
        <name>body</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>label</name>
          <type>Label</type>
        </ref>
        <lit>for</lit>
        <lit>(</lit>
        <ref>
          <name>generators</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>body</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>ifThenElse</name>
      <arg>
        <name>label</name>
        <type>Label</type>
        <card>1</card>
      </arg>
      <arg>
        <name>conditions</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <arg>
        <name>thenStatement</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <arg>
        <name>elseStatement</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>label</name>
          <type>Label</type>
        </ref>
        <lit>if</lit>
        <lit>(</lit>
        <ref>
          <name>conditions</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>thenStatement</name>
          <type>Statement</type>
        </ref>
        <lit>else</lit>
        <ref>
          <name>elseStatement</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>emptyStatement</name>
      <layout>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>globalDirective</name>
      <arg>
        <name>type</name>
        <type>Type</type>
        <card>1</card>
      </arg>
      <arg>
        <name>names</name>
        <type>QualifiedName</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>global</lit>
        <ref>
          <name>type</name>
          <type>Type</type>
        </ref>
        <ref>
          <name>names</name>
          <type>QualifiedName</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>assertWithMessage</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>message</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>assert</lit>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>:</lit>
        <ref>
          <name>message</name>
          <type>Expression</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Literal</name>
    <production>
      <name>boolean</name>
      <arg>
        <name>booleanLiteral</name>
        <type>BooleanLiterals</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>booleanLiteral</name>
          <type>BooleanLiterals</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>dateTime</name>
      <arg>
        <name>dateTimeLiteral</name>
        <type>DateTimeLiteral</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>dateTimeLiteral</name>
          <type>DateTimeLiteral</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>integer</name>
      <arg>
        <name>integerLiteral</name>
        <type>IntegerLiteral</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>integerLiteral</name>
          <type>IntegerLiteral</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>location</name>
      <arg>
        <name>locationLiteral</name>
        <type>LocationLiteral</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>locationLiteral</name>
          <type>LocationLiteral</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>real</name>
      <arg>
        <name>realLiteral</name>
        <type>RealLiteral</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>realLiteral</name>
          <type>RealLiteral</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>string</name>
      <arg>
        <name>stringLiteral</name>
        <type>StringLiteral</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>stringLiteral</name>
          <type>StringLiteral</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>rational</name>
      <arg>
        <name>rationalLiteral</name>
        <type>RationalLiteral</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>rationalLiteral</name>
          <type>RationalLiteral</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>regExp</name>
      <arg>
        <name>regExpLiteral</name>
        <type>RegExpLiteral</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>regExpLiteral</name>
          <type>RegExpLiteral</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>EvalCommand</name>
    <production>
      <name>import</name>
      <arg>
        <name>imported</name>
        <type>Import</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>imported</name>
          <type>Import</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>declaration</name>
      <arg>
        <name>declaration</name>
        <type>Declaration</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>declaration</name>
          <type>Declaration</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>statement</name>
      <arg>
        <name>statement</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>statement</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>output</name>
      <layout />
    </production>
  </nonterminal>
  <nonterminal>
    <name>FunctionModifier</name>
    <production>
      <name>test</name>
      <layout>
        <lit>test</lit>
      </layout>
    </production>
    <production>
      <name>default</name>
      <layout>
        <lit>default</lit>
      </layout>
    </production>
    <production>
      <name>java</name>
      <layout>
        <lit>java</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>ProdModifier</name>
    <production>
      <name>bracket</name>
      <layout>
        <lit>bracket</lit>
      </layout>
    </production>
    <production>
      <name>tag</name>
      <arg>
        <name>tag</name>
        <type>Tag</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>tag</name>
          <type>Tag</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>associativity</name>
      <arg>
        <name>associativity</name>
        <type>Assoc</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>associativity</name>
          <type>Assoc</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>RegExpLiteral</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>RegExp</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>Nonterminal</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>PreStringChars</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>StringTail</name>
    <production>
      <name>post</name>
      <arg>
        <name>post</name>
        <type>PostStringChars</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>post</name>
          <type>PostStringChars</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>midInterpolated</name>
      <arg>
        <name>mid</name>
        <type>MidStringChars</type>
        <card>1</card>
      </arg>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>tail</name>
        <type>StringTail</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>mid</name>
          <type>MidStringChars</type>
        </ref>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <ref>
          <name>tail</name>
          <type>StringTail</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>midTemplate</name>
      <arg>
        <name>mid</name>
        <type>MidStringChars</type>
        <card>1</card>
      </arg>
      <arg>
        <name>template</name>
        <type>StringTemplate</type>
        <card>1</card>
      </arg>
      <arg>
        <name>tail</name>
        <type>StringTail</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>mid</name>
          <type>MidStringChars</type>
        </ref>
        <ref>
          <name>template</name>
          <type>StringTemplate</type>
        </ref>
        <ref>
          <name>tail</name>
          <type>StringTail</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>DataTypeSelector</name>
    <production>
      <name>selector</name>
      <arg>
        <name>sort</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <arg>
        <name>production</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>sort</name>
          <type>QualifiedName</type>
        </ref>
        <lit>.</lit>
        <ref>
          <name>production</name>
          <type>Name</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>TagString</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>NonterminalLabel</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>Name</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>FunctionDeclaration</name>
    <production>
      <name>expression</name>
      <arg>
        <name>tags</name>
        <type>Tags</type>
        <card>1</card>
      </arg>
      <arg>
        <name>visibility</name>
        <type>Visibility</type>
        <card>1</card>
      </arg>
      <arg>
        <name>signature</name>
        <type>Signature</type>
        <card>1</card>
      </arg>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>tags</name>
          <type>Tags</type>
        </ref>
        <ref>
          <name>visibility</name>
          <type>Visibility</type>
        </ref>
        <ref>
          <name>signature</name>
          <type>Signature</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>abstract</name>
      <arg>
        <name>tags</name>
        <type>Tags</type>
        <card>1</card>
      </arg>
      <arg>
        <name>visibility</name>
        <type>Visibility</type>
        <card>1</card>
      </arg>
      <arg>
        <name>signature</name>
        <type>Signature</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>tags</name>
          <type>Tags</type>
        </ref>
        <ref>
          <name>visibility</name>
          <type>Visibility</type>
        </ref>
        <ref>
          <name>signature</name>
          <type>Signature</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>default</name>
      <arg>
        <name>tags</name>
        <type>Tags</type>
        <card>1</card>
      </arg>
      <arg>
        <name>visibility</name>
        <type>Visibility</type>
        <card>1</card>
      </arg>
      <arg>
        <name>signature</name>
        <type>Signature</type>
        <card>1</card>
      </arg>
      <arg>
        <name>body</name>
        <type>FunctionBody</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>tags</name>
          <type>Tags</type>
        </ref>
        <ref>
          <name>visibility</name>
          <type>Visibility</type>
        </ref>
        <ref>
          <name>signature</name>
          <type>Signature</type>
        </ref>
        <ref>
          <name>body</name>
          <type>FunctionBody</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>conditional</name>
      <arg>
        <name>tags</name>
        <type>Tags</type>
        <card>1</card>
      </arg>
      <arg>
        <name>visibility</name>
        <type>Visibility</type>
        <card>1</card>
      </arg>
      <arg>
        <name>signature</name>
        <type>Signature</type>
        <card>1</card>
      </arg>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>conditions</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <layout>
        <ref>
          <name>tags</name>
          <type>Tags</type>
        </ref>
        <ref>
          <name>visibility</name>
          <type>Visibility</type>
        </ref>
        <ref>
          <name>signature</name>
          <type>Signature</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>when</lit>
        <ref>
          <name>conditions</name>
          <type>Expression</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Start</name>
    <production>
      <name>present</name>
      <layout>
        <lit>start</lit>
      </layout>
    </production>
    <production>
      <name>absent</name>
      <layout />
    </production>
  </nonterminal>
  <lexical>
    <name>LAYOUT</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Body</name>
    <production>
      <name>toplevels</name>
      <arg>
        <name>toplevels</name>
        <type>Toplevel</type>
        <card>*</card>
      </arg>
      <layout>
        <ref>
          <name>toplevels</name>
          <type>Toplevel</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Import</name>
    <production>
      <name>syntax</name>
      <arg>
        <name>syntax</name>
        <type>SyntaxDefinition</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>syntax</name>
          <type>SyntaxDefinition</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>default</name>
      <arg>
        <name>module</name>
        <type>ImportedModule</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>import</lit>
        <ref>
          <name>module</name>
          <type>ImportedModule</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>extend</name>
      <arg>
        <name>module</name>
        <type>ImportedModule</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>extend</lit>
        <ref>
          <name>module</name>
          <type>ImportedModule</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>external</name>
      <arg>
        <name>name</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <arg>
        <name>at</name>
        <type>LocationLiteral</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>import</lit>
        <ref>
          <name>name</name>
          <type>QualifiedName</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>at</name>
          <type>LocationLiteral</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>ConcreteHole</name>
    <production>
      <name>one</name>
      <arg>
        <name>symbol</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>&lt;</lit>
        <ref>
          <name>symbol</name>
          <type>Sym</type>
        </ref>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>&gt;</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>UserType</name>
    <production>
      <name>parametric</name>
      <arg>
        <name>parameters</name>
        <type>Type</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>parameters</name>
          <type>Type</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>name</name>
      <arg>
        <name>name</name>
        <type>QualifiedName</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>name</name>
          <type>QualifiedName</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Variant</name>
    <production>
      <name>nAryConstructor</name>
      <arg>
        <name>name</name>
        <type>Name</type>
        <card>1</card>
      </arg>
      <arg>
        <name>arguments</name>
        <type>TypeArg</type>
        <card>*</card>
      </arg>
      <arg>
        <name>keywordArguments</name>
        <type>KeywordFormals</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>name</name>
          <type>Name</type>
        </ref>
        <lit>(</lit>
        <ref>
          <name>arguments</name>
          <type>TypeArg</type>
        </ref>
        <ref>
          <name>keywordArguments</name>
          <type>KeywordFormals</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>FunctionModifiers</name>
    <production>
      <name>modifierlist</name>
      <arg>
        <name>modifiers</name>
        <type>FunctionModifier</type>
        <card>*</card>
      </arg>
      <layout>
        <ref>
          <name>modifiers</name>
          <type>FunctionModifier</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>BooleanLiterals</name>
    <arg>
      <name>booleanLiteral</name>
      <type>String</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Formals</name>
    <production>
      <name>default</name>
      <arg>
        <name>formals</name>
        <type>Pattern</type>
        <card>*</card>
      </arg>
      <layout>
        <ref>
          <name>formals</name>
          <type>Pattern</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Comprehension</name>
    <production>
      <name>set</name>
      <arg>
        <name>results</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <arg>
        <name>generators</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>{</lit>
        <ref>
          <name>results</name>
          <type>Expression</type>
        </ref>
        <lit>|</lit>
        <ref>
          <name>generators</name>
          <type>Expression</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>list</name>
      <arg>
        <name>results</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <arg>
        <name>generators</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>results</name>
          <type>Expression</type>
        </ref>
        <lit>|</lit>
        <ref>
          <name>generators</name>
          <type>Expression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>map</name>
      <arg>
        <name>from</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>to</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>generators</name>
        <type>Expression</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>from</name>
          <type>Expression</type>
        </ref>
        <lit>:</lit>
        <ref>
          <name>to</name>
          <type>Expression</type>
        </ref>
        <lit>|</lit>
        <ref>
          <name>generators</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>TimeZonePart</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>PostStringChars</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>HexIntegerLiteral</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Sym</name>
    <production>
      <name>except</name>
      <arg>
        <name>symbol</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <arg>
        <name>label</name>
        <type>NonterminalLabel</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>symbol</name>
          <type>Sym</type>
        </ref>
        <lit>!</lit>
        <ref>
          <name>label</name>
          <type>NonterminalLabel</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>iter</name>
      <arg>
        <name>symbol</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>symbol</name>
          <type>Sym</type>
        </ref>
        <lit>+</lit>
      </layout>
    </production>
    <production>
      <name>startOfLine</name>
      <arg>
        <name>symbol</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>^</lit>
        <ref>
          <name>symbol</name>
          <type>Sym</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>iterSep</name>
      <arg>
        <name>symbol</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <arg>
        <name>sep</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>{</lit>
        <ref>
          <name>symbol</name>
          <type>Sym</type>
        </ref>
        <ref>
          <name>sep</name>
          <type>Sym</type>
        </ref>
        <lit>}</lit>
        <lit>+</lit>
      </layout>
    </production>
    <production>
      <name>parametrized</name>
      <arg>
        <name>parameters</name>
        <type>Sym</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>parameters</name>
          <type>Sym</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>literal</name>
      <arg>
        <name>string</name>
        <type>StringConstant</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>string</name>
          <type>StringConstant</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>optional</name>
      <arg>
        <name>symbol</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>symbol</name>
          <type>Sym</type>
        </ref>
        <lit>?</lit>
      </layout>
    </production>
    <production>
      <name>nonterminal</name>
      <layout />
    </production>
    <production>
      <name>column</name>
      <arg>
        <name>symbol</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <arg>
        <name>column</name>
        <type>IntegerLiteral</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>symbol</name>
          <type>Sym</type>
        </ref>
        <lit>@</lit>
        <ref>
          <name>column</name>
          <type>IntegerLiteral</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>endOfLine</name>
      <arg>
        <name>symbol</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>symbol</name>
          <type>Sym</type>
        </ref>
        <lit>$</lit>
      </layout>
    </production>
    <production>
      <name>alternative</name>
      <arg>
        <name>first</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <arg>
        <name>alternatives</name>
        <type>Sym</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>first</name>
          <type>Sym</type>
        </ref>
        <lit>|</lit>
        <ref>
          <name>alternatives</name>
          <type>Sym</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>iterStarSep</name>
      <arg>
        <name>symbol</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <arg>
        <name>sep</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>{</lit>
        <ref>
          <name>symbol</name>
          <type>Sym</type>
        </ref>
        <ref>
          <name>sep</name>
          <type>Sym</type>
        </ref>
        <lit>}</lit>
        <lit>*</lit>
      </layout>
    </production>
    <production>
      <name>iterStar</name>
      <arg>
        <name>symbol</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>symbol</name>
          <type>Sym</type>
        </ref>
        <lit>*</lit>
      </layout>
    </production>
    <production>
      <name>sequence</name>
      <arg>
        <name>first</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <arg>
        <name>sequence</name>
        <type>Sym</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>first</name>
          <type>Sym</type>
        </ref>
        <ref>
          <name>sequence</name>
          <type>Sym</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>characterClass</name>
      <arg>
        <name>charClass</name>
        <type>Class</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>charClass</name>
          <type>Class</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>empty</name>
      <layout>
        <lit>(</lit>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>caseInsensitiveLiteral</name>
      <arg>
        <name>cistring</name>
        <type>CaseInsensitiveStringConstant</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>cistring</name>
          <type>CaseInsensitiveStringConstant</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>start</name>
      <arg>
        <name>nonterminal</name>
        <type>Nonterminal</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>start</lit>
        <lit>[</lit>
        <ref>
          <name>nonterminal</name>
          <type>Nonterminal</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>parameter</name>
      <arg>
        <name>nonterminal</name>
        <type>Nonterminal</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>&amp;</lit>
        <ref>
          <name>nonterminal</name>
          <type>Nonterminal</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>labeled</name>
      <arg>
        <name>symbol</name>
        <type>Sym</type>
        <card>1</card>
      </arg>
      <arg>
        <name>label</name>
        <type>NonterminalLabel</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>symbol</name>
          <type>Sym</type>
        </ref>
        <ref>
          <name>label</name>
          <type>NonterminalLabel</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Sym</name>
  </nonterminal>
  <nonterminal>
    <name>QualifiedName</name>
    <production>
      <name>default</name>
      <layout />
    </production>
  </nonterminal>
  <nonterminal>
    <name>StringMiddle</name>
    <production>
      <name>template</name>
      <arg>
        <name>mid</name>
        <type>MidStringChars</type>
        <card>1</card>
      </arg>
      <arg>
        <name>template</name>
        <type>StringTemplate</type>
        <card>1</card>
      </arg>
      <arg>
        <name>tail</name>
        <type>StringMiddle</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>mid</name>
          <type>MidStringChars</type>
        </ref>
        <ref>
          <name>template</name>
          <type>StringTemplate</type>
        </ref>
        <ref>
          <name>tail</name>
          <type>StringMiddle</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>mid</name>
      <arg>
        <name>mid</name>
        <type>MidStringChars</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>mid</name>
          <type>MidStringChars</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>interpolated</name>
      <arg>
        <name>mid</name>
        <type>MidStringChars</type>
        <card>1</card>
      </arg>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>tail</name>
        <type>StringMiddle</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>mid</name>
          <type>MidStringChars</type>
        </ref>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <ref>
          <name>tail</name>
          <type>StringMiddle</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>URLChars</name>
    <arg>
      <name>dummy</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
</root>
