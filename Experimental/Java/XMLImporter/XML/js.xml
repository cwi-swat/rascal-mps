<?xml version="1.0" encoding="UTF-8"?>
<root>
  <lexical>
    <name>CommentChar</name>
    <arg>
      <name>lit_CommentChar</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>RegularExpression</name>
    <arg>
      <name>lit_RegularExpression</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>I_Source</name>
    <production>
      <name>source</name>
      <arg>
        <name>stat</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <ref>
          <name>stat</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>RegularExpressionClassChar</name>
    <arg>
      <name>lit_RegularExpressionClassChar</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>Comment</name>
    <arg>
      <name>lit_Comment</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>RegularExpressionClass</name>
    <arg>
      <name>lit_RegularExpressionClass</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>CharacterEscapeSequence</name>
    <arg>
      <name>lit_CharacterEscapeSequence</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>VariableDeclarationNoIn</name>
    <production>
      <name>init_VariableDeclarationNoIn</name>
      <arg>
        <name>id</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <arg>
        <name>exp</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>id</name>
          <type>Id</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>exp</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>nonInit_VariableDeclaration</name>
      <arg>
        <name>id</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>id</name>
          <type>Id</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>String</name>
    <arg>
      <name>lit_String</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>Decimal</name>
    <arg>
      <name>lit_Decimal</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Function</name>
    <production>
      <name>f1</name>
      <arg>
        <name>name</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <arg>
        <name>parameters</name>
        <type>Id</type>
        <card>*</card>
      </arg>
      <arg>
        <name>body</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>function</lit>
        <ref>
          <name>name</name>
          <type>Id</type>
        </ref>
        <lit>(</lit>
        <ref>
          <name>parameters</name>
          <type>Id</type>
        </ref>
        <lit>)</lit>
        <lit>{</lit>
        <ref>
          <name>body</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>f2</name>
      <arg>
        <name>parameters</name>
        <type>Id</type>
        <card>*</card>
      </arg>
      <arg>
        <name>body</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>function</lit>
        <lit>(</lit>
        <ref>
          <name>parameters</name>
          <type>Id</type>
        </ref>
        <lit>)</lit>
        <lit>{</lit>
        <ref>
          <name>body</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>I_VarDecl</name>
    <production>
      <name>var_dec</name>
      <arg>
        <name>declarations</name>
        <type>VariableDeclaration</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>var</lit>
        <ref>
          <name>declarations</name>
          <type>VariableDeclaration</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>let_dec</name>
      <arg>
        <name>declarations</name>
        <type>VariableDeclaration</type>
        <card>+</card>
      </arg>
      <layout>
        <lit>let</lit>
        <ref>
          <name>declarations</name>
          <type>VariableDeclaration</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>RegularExpressionFlags</name>
    <arg>
      <name>lit_RegularExpressionFlags</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>RegularExpressionFirstChar</name>
    <arg>
      <name>lit_RegularExpressionFirstChar</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>HexDigit</name>
    <arg>
      <name>lit_HexDigit</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>UnicodeEscapeSequence</name>
    <production>
      <name>lit_UnicodeEscapeSequence</name>
      <layout />
    </production>
  </nonterminal>
  <nonterminal>
    <name>CaseClause</name>
    <production>
      <name>defaultCase</name>
      <arg>
        <name>s</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>default</lit>
        <lit>:</lit>
        <ref>
          <name>s</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>caseOf</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>s</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>case</lit>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
        <lit>:</lit>
        <ref>
          <name>s</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>VariableDeclaration</name>
    <production>
      <name>nonInit_VariableDeclaration</name>
      <arg>
        <name>id</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>id</name>
          <type>Id</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>init_VariableDeclaration</name>
      <arg>
        <name>id</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <arg>
        <name>exp</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>id</name>
          <type>Id</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>exp</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>RegularExpressionBody</name>
    <arg>
      <name>lit_RegularExpressionBody</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>DoubleStringChar</name>
    <arg>
      <name>lit_DoubleStringChar</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>PrimitiveString</name>
  </lexical>
  <lexical>
    <name>Id</name>
    <arg>
      <name>lit_Id</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>NonEscapeCharacter</name>
    <arg>
      <name>lit_NonEscapeCharacter</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>HexEscapeSequence</name>
    <arg>
      <name>lit_HexEscapeSequence</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>Whitespace</name>
    <arg>
      <name>lit_Whitespace</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <keywords>
    <keyword>int</keyword>
    <keyword>char</keyword>
    <keyword>catch</keyword>
    <keyword>continue</keyword>
    <keyword>break</keyword>
    <keyword>for</keyword>
    <keyword>native</keyword>
    <keyword>short</keyword>
    <keyword>package</keyword>
    <keyword>export</keyword>
    <keyword>protected</keyword>
    <keyword>import</keyword>
    <keyword>implements</keyword>
    <keyword>function</keyword>
    <keyword>double</keyword>
    <keyword>switch</keyword>
    <keyword>case</keyword>
    <keyword>var</keyword>
    <keyword>while</keyword>
    <keyword>const</keyword>
    <keyword>super</keyword>
    <keyword>transient</keyword>
    <keyword>typeof</keyword>
    <keyword>this</keyword>
    <keyword>throw</keyword>
    <keyword>with</keyword>
    <keyword>public</keyword>
    <keyword>long</keyword>
    <keyword>static</keyword>
    <keyword>float</keyword>
    <keyword>throws</keyword>
    <keyword>default</keyword>
    <keyword>new</keyword>
    <keyword>delete</keyword>
    <keyword>try</keyword>
    <keyword>private</keyword>
    <keyword>true</keyword>
    <keyword>volatile</keyword>
    <keyword>null</keyword>
    <keyword>finally</keyword>
    <keyword>void</keyword>
    <keyword>return</keyword>
    <keyword>false</keyword>
    <keyword>interface</keyword>
    <keyword>instanceof</keyword>
    <keyword>else</keyword>
    <keyword>in</keyword>
    <keyword>synchronized</keyword>
    <keyword>if</keyword>
    <keyword>enum</keyword>
    <keyword>byte</keyword>
    <keyword>class</keyword>
    <keyword>goto</keyword>
    <keyword>final</keyword>
    <keyword>extends</keyword>
    <keyword>do</keyword>
    <keyword>boolean</keyword>
    <keyword>debugger</keyword>
  </keywords>
  <nonterminal>
    <name>Boolean</name>
    <production>
      <name>true</name>
      <layout>
        <lit>true</lit>
      </layout>
    </production>
    <production>
      <name>false</name>
      <layout>
        <lit>false</lit>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>SingleEscapeCharacter</name>
    <arg>
      <name>lit_SingleEscapeCharacter</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>HexInteger</name>
    <arg>
      <name>lit_HexInteger</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>RegularExpressionBackslashSequence</name>
    <arg>
      <name>lit_RegularExpressionBackslashSequence</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>EscapeSequence</name>
    <arg>
      <name>lit_EscapeSequence</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>ExponentPart</name>
    <arg>
      <name>lit_ExponentPart</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>SignedInteger</name>
    <arg>
      <name>lit_SignedInteger</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>Statement</name>
    <production>
      <name>whileDo</name>
      <arg>
        <name>cond</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>stat</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>while</lit>
        <lit>(</lit>
        <ref>
          <name>cond</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>stat</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>debugger</name>
      <layout>
        <lit>debugger</lit>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>s_expression</name>
      <arg>
        <name>function</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>function</name>
          <type>Expression</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>ifThen</name>
      <arg>
        <name>cond</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>stat</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>if</lit>
        <lit>(</lit>
        <ref>
          <name>cond</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>stat</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>with</name>
      <arg>
        <name>scope</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>s</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>with</lit>
        <lit>(</lit>
        <ref>
          <name>scope</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>s</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>breakNoLabel</name>
      <layout>
        <lit>break</lit>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>doWhile</name>
      <arg>
        <name>stat</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <arg>
        <name>cond</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>do</lit>
        <ref>
          <name>stat</name>
          <type>Statement</type>
        </ref>
        <lit>while</lit>
        <lit>(</lit>
        <ref>
          <name>cond</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>forInDeclaration</name>
      <arg>
        <name>obj</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>s</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>for</lit>
        <lit>(</lit>
        <lit>var</lit>
        <lit>in</lit>
        <ref>
          <name>obj</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>s</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>tryCatchFinally</name>
      <arg>
        <name>s</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <arg>
        <name>id</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <arg>
        <name>s2</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <arg>
        <name>s3</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>try</lit>
        <ref>
          <name>s</name>
          <type>Statement</type>
        </ref>
        <lit>catch</lit>
        <lit>(</lit>
        <ref>
          <name>id</name>
          <type>Id</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>s2</name>
          <type>Statement</type>
        </ref>
        <lit>finally</lit>
        <ref>
          <name>s3</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>throwExp</name>
      <arg>
        <name>expression</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>throw</lit>
        <ref>
          <name>expression</name>
          <type>Expression</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>continueNoLabel</name>
      <layout>
        <lit>continue</lit>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>throwNoExp</name>
      <layout>
        <lit>throw</lit>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>continueLabel</name>
      <arg>
        <name>id</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>continue</lit>
        <ref>
          <name>id</name>
          <type>Id</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>returnNoExp</name>
      <layout>
        <lit>return</lit>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>switchCase</name>
      <arg>
        <name>cond</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>clauses</name>
        <type>CaseClause</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>switch</lit>
        <lit>(</lit>
        <ref>
          <name>cond</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <lit>{</lit>
        <ref>
          <name>clauses</name>
          <type>CaseClause</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>forDo</name>
      <arg>
        <name>e1</name>
        <type>Expression</type>
        <card>*</card>
      </arg>
      <arg>
        <name>e2</name>
        <type>Expression</type>
        <card>*</card>
      </arg>
      <arg>
        <name>ops</name>
        <type>Expression</type>
        <card>*</card>
      </arg>
      <arg>
        <name>stat</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>for</lit>
        <lit>(</lit>
        <ref>
          <name>e1</name>
          <type>Expression</type>
        </ref>
        <lit>;</lit>
        <ref>
          <name>e2</name>
          <type>Expression</type>
        </ref>
        <lit>;</lit>
        <ref>
          <name>ops</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>stat</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>function</name>
      <arg>
        <name>f</name>
        <type>Function</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>f</name>
          <type>Function</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>block</name>
      <arg>
        <name>stat</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>{</lit>
        <ref>
          <name>stat</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>forIn</name>
      <arg>
        <name>var</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>obj</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>s</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>for</lit>
        <lit>(</lit>
        <ref>
          <name>var</name>
          <type>Expression</type>
        </ref>
        <lit>in</lit>
        <ref>
          <name>obj</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>s</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>empty</name>
      <layout>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>tryFinally</name>
      <arg>
        <name>s</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <arg>
        <name>s2</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>try</lit>
        <ref>
          <name>s</name>
          <type>Statement</type>
        </ref>
        <lit>finally</lit>
        <ref>
          <name>s2</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>ifThenElse</name>
      <arg>
        <name>cond</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>stat1</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <arg>
        <name>stat2</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>if</lit>
        <lit>(</lit>
        <ref>
          <name>cond</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>stat1</name>
          <type>Statement</type>
        </ref>
        <lit>else</lit>
        <ref>
          <name>stat2</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>tryCatch</name>
      <arg>
        <name>s</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <arg>
        <name>id</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <arg>
        <name>s2</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>try</lit>
        <ref>
          <name>s</name>
          <type>Statement</type>
        </ref>
        <lit>catch</lit>
        <lit>(</lit>
        <ref>
          <name>id</name>
          <type>Id</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>s2</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>breakLabel</name>
      <arg>
        <name>id</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>break</lit>
        <ref>
          <name>id</name>
          <type>Id</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>forDoDeclarations</name>
      <arg>
        <name>dummy</name>
        <type>VariableDeclarationNoIn</type>
        <card>+</card>
      </arg>
      <arg>
        <name>conds</name>
        <type>Expression</type>
        <card>*</card>
      </arg>
      <arg>
        <name>ops</name>
        <type>Expression</type>
        <card>*</card>
      </arg>
      <arg>
        <name>s</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>for</lit>
        <lit>(</lit>
        <lit>var</lit>
        <ref>
          <name>dummy</name>
          <type>VariableDeclarationNoIn</type>
        </ref>
        <lit>;</lit>
        <ref>
          <name>conds</name>
          <type>Expression</type>
        </ref>
        <lit>;</lit>
        <ref>
          <name>ops</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
        <ref>
          <name>s</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>labeled</name>
      <arg>
        <name>id</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <arg>
        <name>s</name>
        <type>Statement</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>id</name>
          <type>Id</type>
        </ref>
        <lit>:</lit>
        <ref>
          <name>s</name>
          <type>Statement</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>returnExp</name>
      <arg>
        <name>exp</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>return</lit>
        <ref>
          <name>exp</name>
          <type>Expression</type>
        </ref>
        <lit>;</lit>
      </layout>
    </production>
    <production>
      <name>varDecl</name>
      <arg>
        <name>var</name>
        <type>I_VarDecl</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>var</name>
          <type>I_VarDecl</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>Literal</name>
    <production>
      <name>l_null</name>
      <layout>
        <lit>null</lit>
      </layout>
    </production>
    <production>
      <name>l_reg</name>
      <arg>
        <name>re</name>
        <type>RegularExpression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>re</name>
          <type>RegularExpression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>l_bool</name>
      <arg>
        <name>b</name>
        <type>Boolean</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>b</name>
          <type>Boolean</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>l_string</name>
      <arg>
        <name>s</name>
        <type>String</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>s</name>
          <type>String</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>l_num</name>
      <arg>
        <name>n</name>
        <type>Numeric</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>n</name>
          <type>Numeric</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <nonterminal>
    <name>PropertyName</name>
    <production>
      <name>prop_Numeric</name>
      <arg>
        <name>n</name>
        <type>Numeric</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>n</name>
          <type>Numeric</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>prop_Id</name>
      <arg>
        <name>id</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>id</name>
          <type>Id</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>prop_String</name>
      <arg>
        <name>s</name>
        <type>String</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>s</name>
          <type>String</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>EscapeCharacter</name>
    <arg>
      <name>lit_EscapeCharacter</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>RegularExpressionChar</name>
    <arg>
      <name>lit_RegularExpressionChar</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <nonterminal>
    <name>PropertyAssignment</name>
    <production>
      <name>get</name>
      <arg>
        <name>p</name>
        <type>PropertyName</type>
        <card>1</card>
      </arg>
      <arg>
        <name>dummy</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>get</lit>
        <ref>
          <name>p</name>
          <type>PropertyName</type>
        </ref>
        <lit>(</lit>
        <lit>)</lit>
        <lit>{</lit>
        <ref>
          <name>dummy</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>property</name>
      <arg>
        <name>p</name>
        <type>PropertyName</type>
        <card>1</card>
      </arg>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>p</name>
          <type>PropertyName</type>
        </ref>
        <lit>:</lit>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>set</name>
      <arg>
        <name>p</name>
        <type>PropertyName</type>
        <card>1</card>
      </arg>
      <arg>
        <name>id</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <arg>
        <name>s</name>
        <type>Statement</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>set</lit>
        <ref>
          <name>p</name>
          <type>PropertyName</type>
        </ref>
        <lit>(</lit>
        <ref>
          <name>id</name>
          <type>Id</type>
        </ref>
        <lit>)</lit>
        <lit>{</lit>
        <ref>
          <name>s</name>
          <type>Statement</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
  </nonterminal>
  <lexical>
    <name>DecimalInteger</name>
    <arg>
      <name>lit_DecimalInteger</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>Numeric</name>
    <arg>
      <name>lit_Numeric</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <lexical>
    <name>SingleStringChar</name>
    <arg>
      <name>lit_SingleStringChar</name>
      <type>PrimitiveString</type>
    </arg>
  </lexical>
  <startSymbol>I_Source</startSymbol>
  <nonterminal>
    <name>Expression</name>
    <production>
      <name>brack</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>(</lit>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>literal</name>
      <arg>
        <name>lit</name>
        <type>Literal</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lit</name>
          <type>Literal</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>var</name>
      <arg>
        <name>id</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>id</name>
          <type>Id</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>objectDefinition</name>
      <arg>
        <name>p</name>
        <type>PropertyAssignment</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>{</lit>
        <ref>
          <name>p</name>
          <type>PropertyAssignment</type>
        </ref>
        <lit>}</lit>
      </layout>
    </production>
    <production>
      <name>array</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>*</card>
      </arg>
      <layout>
        <lit>[</lit>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>this</name>
      <layout>
        <lit>this</lit>
      </layout>
    </production>
    <production>
      <name>function</name>
      <arg>
        <name>f</name>
        <type>Function</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>f</name>
          <type>Function</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>call</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>e2</name>
        <type>Expression</type>
        <card>*</card>
      </arg>
      <layout>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
        <lit>(</lit>
        <ref>
          <name>e2</name>
          <type>Expression</type>
        </ref>
        <lit>)</lit>
      </layout>
    </production>
    <production>
      <name>member</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>e2</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
        <lit>[</lit>
        <ref>
          <name>e2</name>
          <type>Expression</type>
        </ref>
        <lit>]</lit>
      </layout>
    </production>
    <production>
      <name>e_property</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>id</name>
        <type>Id</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
        <lit>.</lit>
        <ref>
          <name>id</name>
          <type>Id</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>postDec</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
        <lit>--</lit>
      </layout>
    </production>
    <production>
      <name>postIncr</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
        <lit>++</lit>
      </layout>
    </production>
    <production>
      <name>prefixMin</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>-</lit>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>binNeg</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>~</lit>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>typeof</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>typeof</lit>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>prefixPlus</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>+</lit>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>delete</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>delete</lit>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>preIncr</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>++</lit>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>preDecr</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <lit>--</lit>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>not</name>
      <arg>
        <name>e</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>e</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>rem</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>%</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>div</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>/</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>mul</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>*</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>sub</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>-</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>add</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>+</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>shrr</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>&gt;&gt;&gt;</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>shl</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>&lt;&lt;</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>shr</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>&gt;&gt;</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>geq</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>&gt;=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>leq</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>&lt;=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>instanceof</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>instanceof</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>gt</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>&gt;</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>inn</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>in</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>lt</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>&lt;</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>neqq</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>!==</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>neq</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>!=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>eq</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>==</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>eqq</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>===</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>binAnd</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>&amp;</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>binXor</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>^</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>binOr</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>|</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>and</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>&amp;&amp;</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>or</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>||</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assignShrr</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>&gt;&gt;&gt;=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assign</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assignSub</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>-=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assignBinAnd</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>&amp;=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assignShr</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>&gt;&gt;=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assignBinOr</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>|=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assignBinXor</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>^=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assignDiv</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>/=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assignShl</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>&lt;&lt;=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assignMul</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>*=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assignAdd</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>+=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
    <production>
      <name>assignRem</name>
      <arg>
        <name>lhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <arg>
        <name>rhs</name>
        <type>Expression</type>
        <card>1</card>
      </arg>
      <layout>
        <ref>
          <name>lhs</name>
          <type>Expression</type>
        </ref>
        <lit>%=</lit>
        <ref>
          <name>rhs</name>
          <type>Expression</type>
        </ref>
      </layout>
    </production>
  </nonterminal>
</root>
