package NewLanguage2.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_IId;
  private ConceptPresentation props_IMachine;
  private ConceptPresentation props_IState;
  private ConceptPresentation props_Id;
  private ConceptPresentation props_Trans;
  private ConceptPresentation props_machine;
  private ConceptPresentation props_state;
  private ConceptPresentation props_transition;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.IId:
        if (props_IId == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IId = cpb.create();
        }
        return props_IId;
      case LanguageConceptSwitch.IMachine:
        if (props_IMachine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IMachine = cpb.create();
        }
        return props_IMachine;
      case LanguageConceptSwitch.IState:
        if (props_IState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IState = cpb.create();
        }
        return props_IState;
      case LanguageConceptSwitch.Id:
        if (props_Id == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Id");
          props_Id = cpb.create();
        }
        return props_Id;
      case LanguageConceptSwitch.Trans:
        if (props_Trans == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Trans = cpb.create();
        }
        return props_Trans;
      case LanguageConceptSwitch.machine:
        if (props_machine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("machine");
          props_machine = cpb.create();
        }
        return props_machine;
      case LanguageConceptSwitch.state:
        if (props_state == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("state");
          props_state = cpb.create();
        }
        return props_state;
      case LanguageConceptSwitch.transition:
        if (props_transition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("transition");
          props_transition = cpb.create();
        }
        return props_transition;
    }
    return null;
  }
}
