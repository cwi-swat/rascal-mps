package NewLanguag3.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Ids;
  private ConceptPresentation props_Machines;
  private ConceptPresentation props_States;
  private ConceptPresentation props_Trans;
  private ConceptPresentation props_id;
  private ConceptPresentation props_machine;
  private ConceptPresentation props_state;
  private ConceptPresentation props_transition;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Ids:
        if (props_Ids == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Ids = cpb.create();
        }
        return props_Ids;
      case LanguageConceptSwitch.Machines:
        if (props_Machines == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Machines = cpb.create();
        }
        return props_Machines;
      case LanguageConceptSwitch.States:
        if (props_States == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_States = cpb.create();
        }
        return props_States;
      case LanguageConceptSwitch.Trans:
        if (props_Trans == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Trans = cpb.create();
        }
        return props_Trans;
      case LanguageConceptSwitch.id:
        if (props_id == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("id");
          props_id = cpb.create();
        }
        return props_id;
      case LanguageConceptSwitch.machine:
        if (props_machine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("machine");
          props_machine = cpb.create();
        }
        return props_machine;
      case LanguageConceptSwitch.state:
        if (props_state == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("state");
          props_state = cpb.create();
        }
        return props_state;
      case LanguageConceptSwitch.transition:
        if (props_transition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("transition");
          props_transition = cpb.create();
        }
        return props_transition;
    }
    return null;
  }
}
