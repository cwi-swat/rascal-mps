package NewLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import io.usethesource.vallang.IValue;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import io.usethesource.vallang.IValueFactory;
import org.rascalmpl.values.ValueFactoryFactory;
import org.rascalmpl.library.Prelude;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.rascalmpl.library.Rascal2MPS;
import io.usethesource.vallang.IConstructor;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class RascalImporter__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x7694383cc1724f9bL, 0xba3e2e4103639d0dL, 0xef7205cf8eef116L, "NewLanguage.structure.RascalImporter");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Void> importModel_id3_bdwi6Xb$4 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("importModel").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3_bdwi6Xb$4").registry(REGISTRY).build();
  /*package*/ static final SMethod<SNode> toNode_id3_bdwi6XiW3 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("toNode").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("3_bdwi6XiW3").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(IValue.class, ""));
  public static final SMethod<SNode> getAST_id6ZXpTqmyBr = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getAST").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6ZXpTqmyBr").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(importModel_id3_bdwi6Xb$4, toNode_id3_bdwi6XiW3, getAST_id6ZXpTqmyBr);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void importModel_id3_bdwi6Xb$4(@NotNull SNode __thisNode__) {
    IValueFactory vf = ValueFactoryFactory.getValueFactory();
    Prelude d = new Prelude(vf);
    // RascalParserFacade parser = new RascalParserFacade(); 
    try {
      // rootAst = parser.parse(new File(this.path)); 
      SLinkOperations.setTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x7694383cc1724f9bL, 0xba3e2e4103639d0dL, 0xef7205cf8eef116L, 0xef7205cf8eef11cL, "root"), RascalImporter__BehaviorDescriptor.toNode_id3_bdwi6XiW3.invoke(__thisNode__, d.arbBool()));
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
  /*package*/ static SNode toNode_id3_bdwi6XiW3(@NotNull SNode __thisNode__, IValue val) {
    SNode mpsNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x7694383cc1724f9bL, 0xba3e2e4103639d0dL, 0xef7205cf8eef15eL, "NewLanguage.structure.NonTerminalNode"));
    SPropertyOperations.assign(mpsNode, MetaAdapterFactory.getProperty(0x7694383cc1724f9bL, 0xba3e2e4103639d0dL, 0xef7205cf8eef15eL, 0xef7205cf8eef15fL, "ruleName"), val.getType().toString());
    return mpsNode;
  }
  /*package*/ static SNode getAST_id6ZXpTqmyBr(@NotNull SNode __thisNode__) {
    Rascal2MPS m = new Rascal2MPS();
    IConstructor c = m.getSomething();
    SNode mpsNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x7694383cc1724f9bL, 0xba3e2e4103639d0dL, 0xef7205cf8eef15eL, "NewLanguage.structure.NonTerminalNode"));
    SPropertyOperations.assign(mpsNode, MetaAdapterFactory.getProperty(0x7694383cc1724f9bL, 0xba3e2e4103639d0dL, 0xef7205cf8eef15eL, 0xef7205cf8eef15fL, "ruleName"), c.getName());

    return mpsNode;
  }

  /*package*/ RascalImporter__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        importModel_id3_bdwi6Xb$4(node);
        return null;
      case 1:
        return (T) ((SNode) toNode_id3_bdwi6XiW3(node, (IValue) parameters[0]));
      case 2:
        return (T) ((SNode) getAST_id6ZXpTqmyBr(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
